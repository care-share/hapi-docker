<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Validation</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>
		<section name="Validation">
		
			<p>
				HAPI supportes two types of validation, both of which are described in the
				sections below.
			</p>
			<ul>
				<li>
					<b>Parser Validation</b> is validation at runtime during the parsing
					of a resource. It can be used to catch input data that is impossible to
					fit into the HAPI data model. For example, it can be used to throw exceptions 
					or display error messages if a resource being parsed contains tags for which
					there are no appropriate fields in a HAPI data structure.
				</li>
				<li>
					<b>Resource Validation</b> is validation of the parsed (or constructed) resource against 
					the official FHIR validation rules (e.g. Schema/Schematron).
				</li>
			</ul>
		
		</section>

		<section name="Parser Validation">
			
			<p>
				Parser validation is controlled by calling <code>setParserErrorHandler(IParserErrorHandler)</code> on
				either the FhirContext or on individual parser instances. This method
				takes an <code>IParserErrorHandler</code>, which is a callback that
				will be invoked any time a parse issue is detected.
			</p>			
			<p>
				There are two implementations of <code>IParserErrorHandler</code> worth 
				mentioning.
			</p>
			<ul>
				<ul>
					<a href="./apidocs/ca/uhn/fhir/parser/LenientErrorHandler.html">LenientErrorHandler</a>
					logs any errors but does not abort parsing. This is the default.
				</ul>
				<ul>
					<a href="./apidocs/ca/uhn/fhir/parser/StrictErrorHandler.html">StrictErrorHandler</a>
					throws a <code>DataFormatException</code> if any errors are detected.
				</ul>
			</ul>
			
			<p>
				The following example shows how to configure a parser to use strict validation. 
			</p>
			<macro name="snippet">
				<param name="id" value="parserValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>
			
			<p>
				You can also configure the error handler at the FhirContext level, which is useful
				for clients. 
			</p>
			<macro name="snippet">
				<param name="id" value="clientValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>
			
			<p>
				FhirContext level validators can also be useful on servers. 
			</p>
			<macro name="snippet">
				<param name="id" value="serverValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>

		</section>

		<!-- RESOURCE VALIDATION -->

		<section name="Resource Validation">

			<p>
				HAPI provides a built-in and configurable mechanism for validating resources.
				This mechanism is called the <i>FHIR Validator</i>.
			</p>

			<subsection name="Background">
				
				<p>
					FHIR resource definitions are distributed with a set of XML schema files (XSD)
					as well as a set of XML Schematron (SCH) files. These two sets of files are
					complimentary to each other, meaning that in order to claim compliance to the
					FHIR specification, your resources must validate against both sets.
				</p>
				<p>
					The two sets of files are included with HAPI, and it uses them to perform
					validation.
				</p>
				
			</subsection>
			
			<subsection name="Preparation">
				
				<p>
					In order to use HAPI's Schematron support, a libaray called 
					<a href="https://code.google.com/p/phloc-schematron/">Phloc-Schematron</a>
					is used, so this library must be added to your classpath (or Maven pom file).
					See <a href="./download.html">Downloads</a> for more information.
				</p>
				
			</subsection>
			
			<subsection name="Validating a Resource">
				
				<p>
					To validate a resource instance, a new validator instance is requested
					from the FHIR Context. This validator is then applied against
					a specific resource instance, as shown in the example below.
				</p>
				<macro name="snippet">
					<param name="id" value="basicValidation" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>
						
			</subsection>

			<subsection name="Validating a Set of Files">
				
				<p>
					The following example shows how to load a set of resources from files
					on disk and validate each one.
				</p>
				<macro name="snippet">
					<param name="id" value="validateFiles" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>
						
			</subsection>

		</section>
		
	</body>

</document>
